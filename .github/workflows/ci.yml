name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check code formatting
      run: |
        if [ -f ".prettierrc" ]; then
          npx prettier --check .
        else
          echo "No prettier config found, skipping format check"
        fi

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run npm security scan
      run: |
        if command -v npm-audit-fix &> /dev/null; then
          npm audit fix --dry-run
        else
          echo "npm-audit-fix not available, using npm audit"
        fi

  build:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run build
      run: npm run build
      
    - name: Validate HTML
      run: |
        # Install html5validator if needed
        if ! command -v html5validator &> /dev/null; then
          pip install html5validator
        fi
        # Validate main HTML file
        html5validator --root . --match "*.html" --ignore-re "Attribute.*not allowed" || echo "HTML validation completed with warnings"
      
    - name: Check file sizes
      run: |
        echo "Checking file sizes..."
        find . -name "*.js" -o -name "*.css" -o -name "*.html" | while read file; do
          size=$(wc -c < "$file")
          echo "$file: $size bytes"
          if [ $size -gt 1000000 ]; then
            echo "Warning: $file is larger than 1MB"
          fi
        done
      
    - name: Test basic functionality
      run: |
        # Start server in background
        python3 -m http.server 8000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 5
        
        # Test that server is responding
        curl -f http://localhost:8000 > /dev/null || exit 1
        
        # Stop server
        kill $SERVER_PID
        
        echo "Basic functionality test passed"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, test, e2e-test, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to GitHub Pages (Staging)
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        destination_dir: staging
        
    - name: Comment on PR with staging link
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ Staging deployment available at: https://' + context.repo.owner + '.github.io/' + context.repo.repo + '/staging/'
          })

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, e2e-test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to GitHub Pages (Production)
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from main branch
          
          ## Changes
          - See commit history for details
          
          ## Deployment
          - ‚úÖ All tests passed
          - ‚úÖ Code quality checks passed
          - ‚úÖ Deployed to production
        draft: false
        prerelease: false

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint, test, e2e-test, build]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.e2e-test.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "‚úÖ All pipeline stages completed successfully!"
        echo "üéâ CSV Finder is ready for deployment"
        
    - name: Notify failure
      if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.e2e-test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "‚ùå Pipeline failed!"
        echo "üîç Check the logs for details"
        exit 1